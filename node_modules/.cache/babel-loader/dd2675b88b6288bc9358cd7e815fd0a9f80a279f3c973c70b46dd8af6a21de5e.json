{"ast":null,"code":"// /**\n// =========================================================\n// * Material Dashboard 2 React - v2.2.0\n// =========================================================\n\n// * Product Page: https://www.creative-tim.com/product/material-dashboard-react\n// * Copyright 2023 Creative Tim (https://www.creative-tim.com)\n\n// Coded by www.creative-tim.com\n\n//  =========================================================\n\n// * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// */\n\n// import { useState, useEffect } from \"react\";\n\n// // react-router components\n// import { useLocation, Link } from \"react-router-dom\";\n\n// // prop-types is a library for typechecking of props.\n// import PropTypes from \"prop-types\";\n\n// // @material-ui core components\n// import AppBar from \"@mui/material/AppBar\";\n// import Toolbar from \"@mui/material/Toolbar\";\n// import IconButton from \"@mui/material/IconButton\";\n// import Menu from \"@mui/material/Menu\";\n// import Icon from \"@mui/material/Icon\";\n\n// // Material Dashboard 2 React components\n// import MDBox from \"components/MDBox\";\n// import MDInput from \"components/MDInput\";\n\n// // Material Dashboard 2 React example components\n// import Breadcrumbs from \"examples/Breadcrumbs\";\n// import NotificationItem from \"examples/Items/NotificationItem\";\n\n// // Custom styles for DashboardNavbar\n// import {\n//   navbar,\n//   navbarContainer,\n//   navbarRow,\n//   navbarIconButton,\n//   navbarMobileMenu,\n// } from \"examples/Navbars/DashboardNavbar/styles\";\n\n// // Material Dashboard 2 React context\n// import {\n//   useMaterialUIController,\n//   setTransparentNavbar,\n//   setMiniSidenav,\n//   setOpenConfigurator,\n// } from \"context\";\n\n// function DashboardNavbar({ absolute, light, isMini }) {\n//   const [navbarType, setNavbarType] = useState();\n//   const [controller, dispatch] = useMaterialUIController();\n//   const { miniSidenav, transparentNavbar, fixedNavbar, openConfigurator, darkMode } = controller;\n//   const [openMenu, setOpenMenu] = useState(false);\n//   const route = useLocation().pathname.split(\"/\").slice(1);\n\n//   useEffect(() => {\n//     // Setting the navbar type\n//     if (fixedNavbar) {\n//       setNavbarType(\"sticky\");\n//     } else {\n//       setNavbarType(\"static\");\n//     }\n\n//     // A function that sets the transparent state of the navbar.\n//     function handleTransparentNavbar() {\n//       setTransparentNavbar(dispatch, (fixedNavbar && window.scrollY === 0) || !fixedNavbar);\n//     }\n//     /** \n//      The event listener that's calling the handleTransparentNavbar function when \n//      scrolling the window.\n//     */\n//     window.addEventListener(\"scroll\", handleTransparentNavbar);\n\n//     // Call the handleTransparentNavbar function to set the state with the initial value.\n//     handleTransparentNavbar();\n\n//     // Remove event listener on cleanup\n//     return () => window.removeEventListener(\"scroll\", handleTransparentNavbar);\n//   }, [dispatch, fixedNavbar]);\n\n//   const handleMiniSidenav = () => setMiniSidenav(dispatch, !miniSidenav);\n//   const handleConfiguratorOpen = () => setOpenConfigurator(dispatch, !openConfigurator);\n//   const handleOpenMenu = (event) => setOpenMenu(event.currentTarget);\n//   const handleCloseMenu = () => setOpenMenu(false);\n\n//   // Render the notifications menu\n//   const renderMenu = () => (\n//     <Menu\n//       anchorEl={openMenu}\n//       anchorReference={null}\n//       anchorOrigin={{\n//         vertical: \"bottom\",\n//         horizontal: \"left\",\n//       }}\n//       open={Boolean(openMenu)}\n//       onClose={handleCloseMenu}\n//       sx={{ mt: 2 }}\n//     >\n//       <NotificationItem icon={<Icon>email</Icon>} title=\"Check new messages\" />\n//       <NotificationItem icon={<Icon>podcasts</Icon>} title=\"Manage Podcast sessions\" />\n//       <NotificationItem icon={<Icon>shopping_cart</Icon>} title=\"Payment successfully completed\" />\n//     </Menu>\n//   );\n\n//   // Styles for the navbar icons\n//   const iconsStyle = ({ palette: { dark, white, text }, functions: { rgba } }) => ({\n//     color: () => {\n//       let colorValue = light || darkMode ? white.main : dark.main;\n\n//       if (transparentNavbar && !light) {\n//         colorValue = darkMode ? rgba(text.main, 0.6) : text.main;\n//       }\n\n//       return colorValue;\n//     },\n//   });\n\n//   return (\n//     <AppBar\n//       position={absolute ? \"absolute\" : navbarType}\n//       color=\"inherit\"\n//       sx={(theme) => navbar(theme, { transparentNavbar, absolute, light, darkMode })}\n//     >\n//       <Toolbar sx={(theme) => navbarContainer(theme)}>\n//         <MDBox color=\"inherit\" mb={{ xs: 1, md: 0 }} sx={(theme) => navbarRow(theme, { isMini })}>\n//           <Breadcrumbs icon=\"home\" title={route[route.length - 1]} route={route} light={light} />\n//         </MDBox>\n//         {isMini ? null : (\n//           <MDBox sx={(theme) => navbarRow(theme, { isMini })}>\n//             <MDBox pr={1}>\n//               <MDInput label=\"Search here\" />\n//             </MDBox>\n//             <MDBox color={light ? \"white\" : \"inherit\"}>\n//               <Link to=\"/authentication/sign-in/basic\">\n//                 <IconButton sx={navbarIconButton} size=\"small\" disableRipple>\n//                   <Icon sx={iconsStyle}>account_circle</Icon>\n//                 </IconButton>\n//               </Link>\n//               <IconButton\n//                 size=\"small\"\n//                 disableRipple\n//                 color=\"inherit\"\n//                 sx={navbarMobileMenu}\n//                 onClick={handleMiniSidenav}\n//               >\n//                 <Icon sx={iconsStyle} fontSize=\"medium\">\n//                   {miniSidenav ? \"menu_open\" : \"menu\"}\n//                 </Icon>\n//               </IconButton>\n//               <IconButton\n//                 size=\"small\"\n//                 disableRipple\n//                 color=\"inherit\"\n//                 sx={navbarIconButton}\n//                 onClick={handleConfiguratorOpen}\n//               >\n//                 <Icon sx={iconsStyle}>settings</Icon>\n//               </IconButton>\n//               <IconButton\n//                 size=\"small\"\n//                 disableRipple\n//                 color=\"inherit\"\n//                 sx={navbarIconButton}\n//                 aria-controls=\"notification-menu\"\n//                 aria-haspopup=\"true\"\n//                 variant=\"contained\"\n//                 onClick={handleOpenMenu}\n//               >\n//                 <Icon sx={iconsStyle}>notifications</Icon>\n//               </IconButton>\n//               {renderMenu()}\n//             </MDBox>\n//           </MDBox>\n//         )}\n//       </Toolbar>\n//     </AppBar>\n//   );\n// }\n\n// // Setting default values for the props of DashboardNavbar\n// DashboardNavbar.defaultProps = {\n//   absolute: false,\n//   light: false,\n//   isMini: false,\n// };\n\n// // Typechecking props for the DashboardNavbar\n// DashboardNavbar.propTypes = {\n//   absolute: PropTypes.bool,\n//   light: PropTypes.bool,\n//   isMini: PropTypes.bool,\n// };\n\n// export default DashboardNavbar;","map":{"version":3,"names":[],"sources":["/home/leyian/My-Duka-Frontend-React-Template-Trial/src/examples/Navbars/DashboardNavbar/index.js"],"sourcesContent":["// /**\n// =========================================================\n// * Material Dashboard 2 React - v2.2.0\n// =========================================================\n\n// * Product Page: https://www.creative-tim.com/product/material-dashboard-react\n// * Copyright 2023 Creative Tim (https://www.creative-tim.com)\n\n// Coded by www.creative-tim.com\n\n//  =========================================================\n\n// * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// */\n\n// import { useState, useEffect } from \"react\";\n\n// // react-router components\n// import { useLocation, Link } from \"react-router-dom\";\n\n// // prop-types is a library for typechecking of props.\n// import PropTypes from \"prop-types\";\n\n// // @material-ui core components\n// import AppBar from \"@mui/material/AppBar\";\n// import Toolbar from \"@mui/material/Toolbar\";\n// import IconButton from \"@mui/material/IconButton\";\n// import Menu from \"@mui/material/Menu\";\n// import Icon from \"@mui/material/Icon\";\n\n// // Material Dashboard 2 React components\n// import MDBox from \"components/MDBox\";\n// import MDInput from \"components/MDInput\";\n\n// // Material Dashboard 2 React example components\n// import Breadcrumbs from \"examples/Breadcrumbs\";\n// import NotificationItem from \"examples/Items/NotificationItem\";\n\n// // Custom styles for DashboardNavbar\n// import {\n//   navbar,\n//   navbarContainer,\n//   navbarRow,\n//   navbarIconButton,\n//   navbarMobileMenu,\n// } from \"examples/Navbars/DashboardNavbar/styles\";\n\n// // Material Dashboard 2 React context\n// import {\n//   useMaterialUIController,\n//   setTransparentNavbar,\n//   setMiniSidenav,\n//   setOpenConfigurator,\n// } from \"context\";\n\n// function DashboardNavbar({ absolute, light, isMini }) {\n//   const [navbarType, setNavbarType] = useState();\n//   const [controller, dispatch] = useMaterialUIController();\n//   const { miniSidenav, transparentNavbar, fixedNavbar, openConfigurator, darkMode } = controller;\n//   const [openMenu, setOpenMenu] = useState(false);\n//   const route = useLocation().pathname.split(\"/\").slice(1);\n\n//   useEffect(() => {\n//     // Setting the navbar type\n//     if (fixedNavbar) {\n//       setNavbarType(\"sticky\");\n//     } else {\n//       setNavbarType(\"static\");\n//     }\n\n//     // A function that sets the transparent state of the navbar.\n//     function handleTransparentNavbar() {\n//       setTransparentNavbar(dispatch, (fixedNavbar && window.scrollY === 0) || !fixedNavbar);\n//     }\n//     /** \n//      The event listener that's calling the handleTransparentNavbar function when \n//      scrolling the window.\n//     */\n//     window.addEventListener(\"scroll\", handleTransparentNavbar);\n\n//     // Call the handleTransparentNavbar function to set the state with the initial value.\n//     handleTransparentNavbar();\n\n//     // Remove event listener on cleanup\n//     return () => window.removeEventListener(\"scroll\", handleTransparentNavbar);\n//   }, [dispatch, fixedNavbar]);\n\n//   const handleMiniSidenav = () => setMiniSidenav(dispatch, !miniSidenav);\n//   const handleConfiguratorOpen = () => setOpenConfigurator(dispatch, !openConfigurator);\n//   const handleOpenMenu = (event) => setOpenMenu(event.currentTarget);\n//   const handleCloseMenu = () => setOpenMenu(false);\n\n//   // Render the notifications menu\n//   const renderMenu = () => (\n//     <Menu\n//       anchorEl={openMenu}\n//       anchorReference={null}\n//       anchorOrigin={{\n//         vertical: \"bottom\",\n//         horizontal: \"left\",\n//       }}\n//       open={Boolean(openMenu)}\n//       onClose={handleCloseMenu}\n//       sx={{ mt: 2 }}\n//     >\n//       <NotificationItem icon={<Icon>email</Icon>} title=\"Check new messages\" />\n//       <NotificationItem icon={<Icon>podcasts</Icon>} title=\"Manage Podcast sessions\" />\n//       <NotificationItem icon={<Icon>shopping_cart</Icon>} title=\"Payment successfully completed\" />\n//     </Menu>\n//   );\n\n//   // Styles for the navbar icons\n//   const iconsStyle = ({ palette: { dark, white, text }, functions: { rgba } }) => ({\n//     color: () => {\n//       let colorValue = light || darkMode ? white.main : dark.main;\n\n//       if (transparentNavbar && !light) {\n//         colorValue = darkMode ? rgba(text.main, 0.6) : text.main;\n//       }\n\n//       return colorValue;\n//     },\n//   });\n\n//   return (\n//     <AppBar\n//       position={absolute ? \"absolute\" : navbarType}\n//       color=\"inherit\"\n//       sx={(theme) => navbar(theme, { transparentNavbar, absolute, light, darkMode })}\n//     >\n//       <Toolbar sx={(theme) => navbarContainer(theme)}>\n//         <MDBox color=\"inherit\" mb={{ xs: 1, md: 0 }} sx={(theme) => navbarRow(theme, { isMini })}>\n//           <Breadcrumbs icon=\"home\" title={route[route.length - 1]} route={route} light={light} />\n//         </MDBox>\n//         {isMini ? null : (\n//           <MDBox sx={(theme) => navbarRow(theme, { isMini })}>\n//             <MDBox pr={1}>\n//               <MDInput label=\"Search here\" />\n//             </MDBox>\n//             <MDBox color={light ? \"white\" : \"inherit\"}>\n//               <Link to=\"/authentication/sign-in/basic\">\n//                 <IconButton sx={navbarIconButton} size=\"small\" disableRipple>\n//                   <Icon sx={iconsStyle}>account_circle</Icon>\n//                 </IconButton>\n//               </Link>\n//               <IconButton\n//                 size=\"small\"\n//                 disableRipple\n//                 color=\"inherit\"\n//                 sx={navbarMobileMenu}\n//                 onClick={handleMiniSidenav}\n//               >\n//                 <Icon sx={iconsStyle} fontSize=\"medium\">\n//                   {miniSidenav ? \"menu_open\" : \"menu\"}\n//                 </Icon>\n//               </IconButton>\n//               <IconButton\n//                 size=\"small\"\n//                 disableRipple\n//                 color=\"inherit\"\n//                 sx={navbarIconButton}\n//                 onClick={handleConfiguratorOpen}\n//               >\n//                 <Icon sx={iconsStyle}>settings</Icon>\n//               </IconButton>\n//               <IconButton\n//                 size=\"small\"\n//                 disableRipple\n//                 color=\"inherit\"\n//                 sx={navbarIconButton}\n//                 aria-controls=\"notification-menu\"\n//                 aria-haspopup=\"true\"\n//                 variant=\"contained\"\n//                 onClick={handleOpenMenu}\n//               >\n//                 <Icon sx={iconsStyle}>notifications</Icon>\n//               </IconButton>\n//               {renderMenu()}\n//             </MDBox>\n//           </MDBox>\n//         )}\n//       </Toolbar>\n//     </AppBar>\n//   );\n// }\n\n// // Setting default values for the props of DashboardNavbar\n// DashboardNavbar.defaultProps = {\n//   absolute: false,\n//   light: false,\n//   isMini: false,\n// };\n\n// // Typechecking props for the DashboardNavbar\n// DashboardNavbar.propTypes = {\n//   absolute: PropTypes.bool,\n//   light: PropTypes.bool,\n//   isMini: PropTypes.bool,\n// };\n\n// export default DashboardNavbar;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}